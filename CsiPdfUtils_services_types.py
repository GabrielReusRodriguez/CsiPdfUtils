################################################## 
# CsiPdfUtils_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://PdfUtils.csi.org/types.xsd
##############################

class ns1:
    targetNamespace = "http://PdfUtils.csi.org/types.xsd"

    class llistaPdfs_b64_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://PdfUtils.csi.org/types.xsd"
        type = (schema, "llistaPdfs_b64")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.llistaPdfs_b64_Def.schema
            TClist = [ZSI.TC.String(pname="pdf_b64", aname="_pdf_b64", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pdf_b64 = []
                    return
            Holder.__name__ = "llistaPdfs_b64_Holder"
            self.pyclass = Holder

    class errorItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://PdfUtils.csi.org/types.xsd"
        type = (schema, "errorItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.errorItem_Def.schema
            TClist = [ZSI.TC.String(pname="codi", aname="_codi", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="descripcio", aname="_descripcio", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._codi = None
                    self._descripcio = None
                    return
            Holder.__name__ = "errorItem_Holder"
            self.pyclass = Holder

    class llistaErrors_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://PdfUtils.csi.org/types.xsd"
        type = (schema, "llistaErrors")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.llistaErrors_Def.schema
            TClist = [GTD("http://PdfUtils.csi.org/types.xsd","errorItem",lazy=False)(pname="llistaErrors", aname="_llistaErrors", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._llistaErrors = []
                    return
            Holder.__name__ = "llistaErrors_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://PdfUtils.csi.org/types.xsd)

##############################
# targetNamespace
# http://PdfUtils.csi.org/merge/PdfMerge.xsd
##############################

class ns0:
    targetNamespace = "http://PdfUtils.csi.org/merge/PdfMerge.xsd"

    class PdfMergeRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://PdfUtils.csi.org/merge/PdfMerge.xsd"
        type = (schema, "PdfMergeRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PdfMergeRequest_Def.schema
            TClist = [ZSI.TC.String(pname="operacio", aname="_operacio", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://PdfUtils.csi.org/types.xsd","llistaPdfs_b64",lazy=False)(pname="llistaPdfs_b64", aname="_llistaPdfs_b64", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._operacio = None
                    self._llistaPdfs_b64 = None
                    return
            Holder.__name__ = "PdfMergeRequest_Holder"
            self.pyclass = Holder

    class PdfMergeResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://PdfUtils.csi.org/merge/PdfMerge.xsd"
        type = (schema, "PdfMergeResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PdfMergeResponse_Def.schema
            TClist = [GTD("http://PdfUtils.csi.org/types.xsd","llistaErrors",lazy=False)(pname="error", aname="_error", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="outputPdf", aname="_outputPdf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._error = None
                    self._outputPdf = None
                    return
            Holder.__name__ = "PdfMergeResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://PdfUtils.csi.org/merge/PdfMerge.xsd)
